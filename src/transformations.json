{
  "version" : "0.0.2",
  "transformations" : {
    "read_csv" : {
      "form" : {
        "properties" : {
          "filepath_or_buffer" : {
            "type" : "string",
            "title" : "file path",
            "description" : "Location of the file relative to the notebook. E.g. /Documents/Data/testdata.csv."
          },
          "sep" : {
            "type" : "string",
            "default" : ",",
            "title" : "separator",
            "description" : "Character used to separate columns (e.g. commas, semicolons, etc.)."
          },
          "decimal" : {
            "type" : "string",
            "default" : ".",
            "title" : "decimal character",
            "description" : "Value used to indicate decimals."
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "required" : [
          "filepath_or_buffer"
        ],
        "title" : "Read CSV",
        "type" : "object",
        "callerObject" : "pd",
        "function" : "read_csv",
        "transformationType" : "dataLoading",
        "description" : "Load the csv in a table."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      }
    },
    "read_excel" : {
      "form" : {
        "properties" : {
          "io" : {
            "type" : "string",
            "title" : "file path",
            "description" : "Location of the file relative to the notebook. E.g. /Documents/Data/testdata.csv."
          },
          "sheet_name" : {
            "type" : "string",
            "default" : ",",
            "title" : "sheet name",
            "description" : "Name of the sheet to load."
          },
          "header" : {
            "type" : "number",
            "description" : "Row to use for the column labels (first row is 0).",
            "default" : 0
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "required" : [
          "filepath_or_buffer"
        ],
        "title" : "Read Excel Sheet",
        "type" : "object",
        "callerObject" : "pd",
        "function" : "read_excel",
        "transformationType" : "dataLoading",
        "description" : "Load an excel sheet in a table."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      }
    },
    "to_csv" : {
      "form" : {
        "properties" : {
          "path_or_buf" : {
            "type" : "string",
            "title" : "filename or path",
            "description" : "Location of the file. You can also indicate a path to save it in a specific folder."
          },
          "index" : {
            "type" : "string",
            "default" : "False",
            "enum" : [
              "True",
              "False"
            ],
            "enumNames" : [
              "Include index",
              "Exclude index"
            ],
            "codegenstyle" : "variable"
          }
        },
        "required" : [
          "path_or_buf",
          "index"
        ],
        "type" : "object",
        "title" : "Save/write to CSV",
        "callerObject" : "DataFrame",
        "function" : "to_csv",
        "description" : "Save selected table to csv file.",
        "returnType" : "none"
      }
    },
    "describe" : {
      "form" : {
        "title" : "Overview: Column statistics",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "describe",
        "returnType" : "none",
        "description" : "Get statistical distribution of columns."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      }
    },
    "info" : {
      "form" : {
        "title" : "Overview: Null values and types",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "info",
        "returnType" : "none",
        "description" : "Get the number of non-null values and datatypes of all columns."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      }
    },
    "pivot_table" : {
      "form" : {
        "properties" : {
          "index" : {
            "$ref" : "#/definitions/columns",
            "title" : "pivot table rows"
          },
          "columns" : {
            "$ref" : "#/definitions/columns",
            "title" : "pivot table columns"
          },
          "aggfunc" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "column" : {
                  "$ref" : "#/definitions/column",
                  "title" : "column"
                },
                "function" : {
                  "uniqueItems" : true,
                  "title" : "aggregations",
                  "type" : "array",
                  "items" : {
                    "codegenstyle" : "variable",
                    "type" : "string",
                    "default" : "Count (excl. missing values)",
                    "enumNames" : [
                      "Count (incl. missing values)",
                      "Count (excl. missing values)",
                      "Count unique",
                      "Mean",
                      "Sum",
                      "Maximum",
                      "Minimum",
                      "Median",
                      "First value",
                      "Last value",
                      "Standard deviation",
                      "Variance"
                    ],
                    "enum" : [
                      "\"size\"",
                      "\"count\"",
                      "\"nunique\"",
                      "\"mean\"",
                      "\"sum\"",
                      "\"max\"",
                      "\"min\"",
                      "\"median\"",
                      "\"first\"",
                      "\"last\"",
                      "\"std\"",
                      "\"var\""
                    ]
                  }
                }
              }
            },
            "title" : "aggregations",
            "description" : "Aggregations to perform in the pivot table (e.g. calculating the average)."
          },
          "index_type" : {
            "type" : "string",
            "title" : "index type",
            "default" : "flat",
            "enum" : [
              "flat",
              "hierarchical"
            ],
            "enumNames" : [
              "Flat",
              "Hierarchical indexes"
            ]
          },
          "new table name" : {
            "type" : "string",
            "default" : "pivot"
          }
        },
        "definitions" : {
          "columns" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : []
            }
          },
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "index",
          "aggfunc",
          "index_type"
        ],
        "title" : "Pivot table",
        "type" : "object",
        "callerObject" : "DataFrame.fdt",
        "function" : "pivot_table",
        "description" : "Returns a table with aggregations grouped by elements selected in the rows and columns."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        },
        "aggfunc" : {
          "items" : {
            "classNames" : "side-by-side-fields",
            "column" : {
              "classNames" : "left-field"
            },
            "function" : {
              "classNames" : "right-field"
            }
          }
        }
      }
    },
    "transpose" : {
      "form" : {
        "properties" : {
          "new table name" : {
            "type" : "string",
            "default" : "transposed"
          }
        },
        "required" : [],
        "title" : "Transpose table",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "transpose",
        "description" : "Reflect the table over its main diagonal by writing rows as columns and vice-versa."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        },
        "aggfunc" : {
          "items" : {
            "classNames" : "side-by-side-fields",
            "column" : {
              "classNames" : "left-field"
            },
            "function" : {
              "classNames" : "right-field"
            }
          }
        }
      }
    },
    "get_dummies" : {
      "form" : {
        "required" : [
          "data",
          "columns"
        ],
        "definitions" : {
          "columns" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : []
            }
          },
          "dataframes" : {
            "type" : "string",
            "enum" : []
          }
        },
        "properties" : {
          "data" : {
            "type" : "string",
            "codegenstyle" : "variable",
            "$ref" : "#/definitions/dataframes"
          },
          "dummy_na" : {
            "title" : "NaN column",
            "description" : "Include a column called NaN that indicates if the value is missing.",
            "default" : "False",
            "type" : "string",
            "codegenstyle" : "variable",
            "enum" : [
              "True",
              "False"
            ]
          },
          "columns" : {
            "$ref" : "#/definitions/columns",
            "description" : "Column(s) expanded into several columns for each distinct value with 0/1 indicators."
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "title" : "Create 0/1 indicators for a column",
        "description" : "Create new columns with 0/1 for each unique value in a column. Returns table with additional columns.",
        "type" : "object",
        "callerObject" : "pd",
        "function" : "get_dummies"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      }
    },
    "split_list_to_columns" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column"
          },
          "separator" : {
            "type" : "string",
            "default" : ",",
            "description" : "Item that separates the elements. E.g. in [1,2,3] it would be a comma (,), in [1;2;3] a semicolon (;)."
          },
          "list_marker" : {
            "type" : "string",
            "enum" : [
              "na",
              "square_brackets",
              "parentheses"
            ],
            "enumNames" : [
              "No brackets/parentheses",
              "Square brackets []",
              "Parentheses ()"
            ],
            "description" : "Item that surounds the elements. E.g. in [1,2,3] it would be a square brackets, in (1;2;3) parentheses.",
            "default" : "na",
            "title" : "list marker"
          },
          "split_type" : {
            "type" : "string",
            "enum" : [
              "unique",
              "order"
            ],
            "enumNames" : [
              "Indicators for each unique element (0/1)",
              "Split items in order",
              "split_type"
            ],
            "default" : "unique",
            "title" : "split type",
            "description" : "Define how to split the list in the rows to columns."
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "separator",
          "list_marker"
        ],
        "title" : "Split list to columns",
        "type" : "object",
        "callerObject" : "DataFrame.fdt",
        "function" : "split_list_to_columns",
        "description" : "Create new columns with 0/1 for each unique value in a column with a list (e.g. rows are like [1,2,3]. Returns table with additional columns."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        },
        "aggfunc" : {
          "items" : {
            "classNames" : "side-by-side-fields",
            "column" : {
              "classNames" : "left-field"
            },
            "function" : {
              "classNames" : "right-field"
            }
          }
        }
      }
    },
    "merge" : {
      "form" : {
        "properties" : {
          "right" : {
            "type" : "string",
            "codegenstyle" : "variable",
            "$ref" : "#/definitions/dataframes",
            "description" : "Table to be used to join on the right."
          },
          "how" : {
            "type" : "string",
            "enum" : [
              "left",
              "right",
              "outer",
              "inner"
            ],
            "default" : "inner",
            "description" : "Type of join to be performed."
          },
          "left_on" : {
            "$ref" : "#/definitions/columns",
            "title" : "left column"
          },
          "right_on" : {
            "$ref" : "#/definitions/right_columns",
            "title" : "right column"
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "columns" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : []
            }
          },
          "dataframes" : {
            "type" : "string",
            "enum" : []
          },
          "right_columns" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : []
            }
          }
        },
        "required" : [
          "right",
          "how",
          "left_on",
          "right_on"
        ],
        "function" : "merge",
        "callerObject" : "DataFrame",
        "type" : "object",
        "title" : "Join tables",
        "description" : "Joins two tables. Select right parameter to populate column names to join on."
      },
      "uischema" : {
        "classNames" : "side-by-side-fields",
        "right" : {
          "classNames" : "left-field"
        },
        "how" : {
          "classNames" : "right-field"
        },
        "right_on" : {
          "ui:widget" : "checkboxes",
          "classNames" : "right-field"
        },
        "left_on" : {
          "ui:widget" : "checkboxes",
          "classNames" : "left-field"
        },
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table",
          "classNames" : "full-width"
        }
      }
    },
    "append" : {
      "form" : {
        "properties" : {
          "other" : {
            "type" : "string",
            "codegenstyle" : "variable",
            "$ref" : "#/definitions/dataframes",
            "description" : "Table to append at the bottom."
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "dataframes" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "other"
        ],
        "title" : "Append dataframes",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "append",
        "description" : "Add two tables with the same columns \"on top of each other\"."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      }
    },
    "sort_values" : {
      "form" : {
        "properties" : {
          "by" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "title" : "column"
          },
          "ascending" : {
            "type" : "string",
            "default" : "True",
            "enum" : [
              "True",
              "False"
            ],
            "enumNames" : [
              "Ascending",
              "Descending"
            ],
            "codegenstyle" : "variable",
            "title" : "sorting type"
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "by",
          "ascending"
        ],
        "title" : "Sort data",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "sort_values",
        "description" : "Sort the table based on one column. "
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      }
    },
    "drop" : {
      "form" : {
        "required" : [
          "columns"
        ],
        "definitions" : {
          "columns" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : []
            }
          }
        },
        "properties" : {
          "columns" : {
            "$ref" : "#/definitions/columns",
            "description" : "Select the columns that you want to remove."
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "title" : "Drop/exclude columns",
        "description" : "Drop columns from the table.",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "drop"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      }
    },
    "filter" : {
      "form" : {
        "required" : [
          "items"
        ],
        "definitions" : {
          "columns" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : []
            }
          }
        },
        "properties" : {
          "items" : {
            "$ref" : "#/definitions/columns",
            "description" : "Select the columns that you want to remove."
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "title" : "Keep columns",
        "description" : "Keep only specific columns from the table.",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "filter"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      }
    },
    "flatten_multiindex" : {
      "form" : {
        "properties" : {
          "axis" : {
            "type" : "string",
            "default" : "all",
            "enum" : [
              "all",
              "index",
              "columns"
            ],
            "enumNames" : [
              "Rows and columns",
              "Rows",
              "Columns"
            ]
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "required" : [
          "axis"
        ],
        "title" : "Flatten multiindex",
        "description" : "Flatten multi-index in columns and rows.",
        "type" : "object",
        "callerObject" : "DataFrame.fdt",
        "function" : "flatten_multiindex"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      }
    },
    "rename" : {
      "form" : {
        "properties" : {
          "columns" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "column" : {
                  "$ref" : "#/definitions/column",
                  "title" : "Column to rename"
                },
                "newname" : {
                  "type" : "string",
                  "title" : "New name"
                }
              }
            },
            "title" : "Columns to rename"
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "columns"
        ],
        "title" : "Rename columns",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "rename",
        "description" : "Change the name of the columns in a table"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      }
    },
    "astype" : {
      "form" : {
        "properties" : {
          "dtype" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "column" : {
                  "$ref" : "#/definitions/column",
                  "title" : "Column to rename"
                },
                "type" : {
                  "type" : "string",
                  "enum" : [
                    "int64",
                    "float64",
                    "string",
                    "bool",
                    "datetime64"
                  ],
                  "enumNames" : [
                    "Integer (e.g. 1, 2, 3)",
                    "Decimal number (e.g. 49.99)",
                    "Text",
                    "Boolean (True/False)",
                    "Date time"
                  ]
                }
              }
            },
            "title" : "Columns to reassign"
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "dtype"
        ],
        "title" : "Assign column types",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "astype",
        "description" : "Change the data type of columns."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      }
    },
    "dropna" : {
      "form" : {
        "required" : [],
        "properties" : {
          "axis" : {
            "type" : "string",
            "enum" : [
              "index",
              "columns"
            ],
            "enumNames" : [
              "Rows",
              "Columns"
            ],
            "description" : "Drop rows or columns",
            "default" : "index"
          },
          "how" : {
            "type" : "string",
            "enum" : [
              "any",
              "all"
            ],
            "description" : "Elements that need to be blank to drop the column",
            "default" : "any"
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "title" : "Drop blanks / NAs",
        "description" : "Drop rows or columns that contain blanks",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "dropna"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        },
        "columns" : {
          "ui:widget" : "checkboxes"
        }
      }
    },
    "extract_number_from_string" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "dtype" : {
            "type" : "string",
            "default" : "int64",
            "enum" : [
              "int64",
              "float64"
            ],
            "enumNames" : [
              "Integer (e.g. 1, 2, 3)",
              "Decimal number (e.g. 49.99)"
            ],
            "title" : "Number type"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "title" : "[Column] Extract number from text",
        "description" : "Extract the first occurrence of a number from a text column",
        "type" : "object",
        "callerObject" : "DataFrame[Series].fdt",
        "function" : "extract_number_from_string",
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        }
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "round" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "decimals" : {
            "type" : "number"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "required" : [
          "column",
          "decimals"
        ],
        "title" : "[Column] Round column",
        "type" : "object",
        "callerObject" : "DataFrame[Series]",
        "function" : "round",
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "description" : "Round the values in a numerical column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "contains" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "pat" : {
            "title" : "pattern",
            "description" : "Find this pattern in the column (includes partial matches)",
            "type" : "string"
          },
          "case" : {
            "type" : "string",
            "title" : "case sensitive",
            "enum" : [
              "True",
              "False"
            ],
            "default" : "True",
            "codegenstyle" : "variable"
          },
          "regex" : {
            "type" : "string",
            "enum" : [
              "True",
              "False"
            ],
            "default" : "False",
            "title" : "",
            "description" : "[Advanced] extraction using a regular expression.",
            "codegenstyle" : "variable"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "pat"
        ],
        "title" : "[Column] Find contained text",
        "type" : "object",
        "callerObject" : "DataFrame[Series].str",
        "function" : "contains",
        "description" : "Check if the given pattern is contained in a text column. Returns true/false depending on if the text is found."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "find" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "sub" : {
            "type" : "string",
            "title" : "Text being searched"
          },
          "start" : {
            "type" : "number"
          },
          "end" : {
            "type" : "number"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "sub"
        ],
        "title" : "[Column] Find text position",
        "callerObject" : "DataFrame[Series].str",
        "function" : "find",
        "type" : "object",
        "description" : "Find the position of a text fragment within a column. Return a position number or -1 if the text is not found."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "replace" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "pat" : {
            "type" : "string",
            "title" : "text to replace"
          },
          "repl" : {
            "type" : "string",
            "title" : "replacement text"
          },
          "case" : {
            "type" : "string",
            "title" : "case sensitive",
            "enum" : [
              "True",
              "False"
            ],
            "default" : "True",
            "codegenstyle" : "variable"
          },
          "n" : {
            "title" : "Number of replacements",
            "type" : "number",
            "description" : "Number of replacements to perform if there is more than 1 match. To replace all leave as -1.",
            "default" : -1
          },
          "regex" : {
            "type" : "string",
            "enum" : [
              "True",
              "False"
            ],
            "default" : "False",
            "title" : "",
            "description" : "[Advanced] extraction using a regular expression."
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "required" : [
          "column",
          "pat",
          "repl"
        ],
        "type" : "object",
        "title" : "[Column] Replace text",
        "callerObject" : "DataFrame[Series].str",
        "function" : "replace",
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "description" : "Replace text contained in a text column with new text."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "mean" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "new variable name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Mean of a column",
        "callerObject" : "DataFrame[Series]",
        "function" : "mean",
        "type" : "object",
        "description" : "Returns a variable with the mean of all values from a column."
      },
      "uischema" : {
        "new variable name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "sum" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "new variable name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Sum of a column",
        "callerObject" : "DataFrame[Series]",
        "function" : "sum",
        "type" : "object",
        "description" : "Returns a variable with the sum of all values from a column."
      },
      "uischema" : {
        "new variable name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "var" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "new variable name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Variance",
        "callerObject" : "DataFrame[Series]",
        "function" : "var",
        "type" : "object",
        "description" : "Returns a variable with the variance of all values from a column."
      },
      "uischema" : {
        "new variable name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "std" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "new variable name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Standard deviation",
        "callerObject" : "DataFrame[Series]",
        "function" : "std",
        "type" : "object",
        "description" : "Returns a variable with the standard deviation of all values from a column."
      },
      "uischema" : {
        "new variable name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "bin_column" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "size",
              "number",
              "quantiles",
              "custom"
            ],
            "enumNames" : [
              "Size of bin",
              "Number of bins",
              "Quantiles (e.g. quartiles)",
              "Custom interval ranges"
            ],
            "default" : "size"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "size"
                    ]
                  },
                  "start" : {
                    "type" : "number",
                    "description" : "Non-inclusive: Sart the bucket above this number. For example, if start is set at 5, bucketing will start at 6."
                  },
                  "size" : {
                    "type" : "number",
                    "description" : "Inclusive: Take buckets of this size. For example, if start is set at 5, and size to 10, it will pick up elements from 6 to 15, including 15."
                  },
                  "end" : {
                    "type" : "number",
                    "description" : "Inclusive: Number at which to end the buckets. E.g. if start = 5, size =10 and end is set to 17, it will only create a category (5,15]. The next valid end would be 25."
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "number"
                    ]
                  },
                  "bin_number" : {
                    "type" : "number",
                    "title" : "bin number",
                    "description" : "Number of equally spaced bins used. Bin width is then (max-min)/bin number."
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "quantiles"
                    ]
                  },
                  "quantiles" : {
                    "type" : "number",
                    "description" : "Number of quantiles. 10 for deciles, 4 for quartiles, etc."
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "custom"
                    ]
                  },
                  "breaks" : {
                    "description" : "Set the break points for the custom ranges. Need to include start and end elements",
                    "type" : "array",
                    "items" : {
                      "type" : "number"
                    }
                  },
                  "closed" : {
                    "type" : "string",
                    "enum" : [
                      "left",
                      "right",
                      "both",
                      "neither"
                    ],
                    "default" : "right",
                    "description" : "For example, breaks of [1, 3, 5 o] closed on the right implies that nubmer 3 will be part of the interval (1-3]. If closed on the let, then 3 would be part of interval [3-5)"
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              }
            ]
          }
        },
        "title" : "[Column] Bin/Bucket columns",
        "callerObject" : "DataFrame[Series].fdt",
        "function" : "bin_column",
        "type" : "object",
        "returnType" : "series",
        "description" : "Creates bins/bukets for columns with numerical values."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "fill_empty" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "function",
              "value"
            ],
            "default" : "function"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "title" : "Size of bins",
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "function"
                    ]
                  },
                  "function" : {
                    "type" : "string",
                    "enum" : [
                      "ffill",
                      "bfill",
                      "most_frequent",
                      "mean"
                    ],
                    "enumNames" : [
                      "forward fill (take the one above)",
                      "backward fill (take the one below)",
                      "most frequent",
                      "average/mean"
                    ]
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              },
              {
                "title" : "Number of bins",
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "value"
                    ]
                  },
                  "value" : {
                    "type" : "number"
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              }
            ]
          }
        },
        "title" : "[Column] Fill empty values",
        "callerObject" : "DataFrame[Series].fdt",
        "function" : "fill_empty",
        "type" : "object",
        "returnType" : "series",
        "description" : "Fill empty values in a column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "uppercase" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Set text to upper case",
        "callerObject" : "DataFrame[Series].str",
        "function" : "upper",
        "type" : "object",
        "description" : "Set the text in a column to upper case."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "lowercase" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Set text to lower case",
        "callerObject" : "DataFrame[Series].str",
        "function" : "lower",
        "type" : "object",
        "description" : "Set the text in a column to lower case."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "to_datetime" : {
      "form" : {
        "properties" : {
          "arg" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "seriesColumn"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "string",
              "number"
            ],
            "codegenstyle" : "ignore",
            "enumNames" : [
              "From text (e.g. 20-02-2020)",
              "From number (e.g. 1605552766)"
            ],
            "default" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "arg",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "title" : "From date text",
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "string"
                    ]
                  },
                  "format" : {
                    "type" : "string",
                    "description" : "Examples: %d/%m/%Y (day/month/year), %H:%M:%S (hour:minute:second)"
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              },
              {
                "String" : "From number",
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "number"
                    ]
                  },
                  "unit" : {
                    "type" : "string",
                    "enum" : [
                      "D",
                      "s",
                      "ms",
                      "us",
                      "ns"
                    ],
                    "enumNames" : [
                      "Day",
                      "Second",
                      "Milisecond",
                      "Microsecond",
                      "Nanosecond"
                    ],
                    "default" : "ns",
                    "description" : "Unit of the date column."
                  }
                }
              }
            ]
          }
        },
        "title" : "[Column] Convert column to datetime",
        "type" : "object",
        "callerObject" : "pd",
        "function" : "to_datetime",
        "description" : "Converts a column to a date-time format using the specified rules.",
        "returnType" : "series"
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "year" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Get year",
        "callerObject" : "DataFrame[Series].dt",
        "function" : "year",
        "type" : "object",
        "transformationType" : "property",
        "description" : "Gets the year value from a datetime column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "month" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Get month number",
        "callerObject" : "DataFrame[Series].dt",
        "function" : "month",
        "type" : "object",
        "transformationType" : "property",
        "description" : "Gets the month value from a datetime column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "day" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Get day number",
        "callerObject" : "DataFrame[Series].dt",
        "function" : "day",
        "type" : "object",
        "transformationType" : "property",
        "description" : "Gets the day value from a datetime column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "dayofweek" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Get weekday number",
        "callerObject" : "DataFrame[Series].dt",
        "function" : "dayofweek",
        "type" : "object",
        "transformationType" : "property",
        "description" : "Gets the day value from a datetime column. Returns a number assuming Monday=0 and Sunday=6."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "day_name" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Get weekday name",
        "callerObject" : "DataFrame[Series].dt",
        "function" : "day_name",
        "type" : "object",
        "description" : "Gets the day name from a datetime column. Returns text ilke \"Monday\"."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "divide" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "value",
              "column"
            ],
            "default" : "value",
            "codegenstyle" : "ignore"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "value"
                    ]
                  },
                  "other" : {
                    "type" : "number",
                    "title" : "value"
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "column"
                    ]
                  },
                  "other" : {
                    "$ref" : "#/definitions/column",
                    "codegenstyle" : "seriesColumn",
                    "title" : "column"
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              }
            ]
          }
        },
        "title" : "[Column] Divide column values",
        "callerObject" : "DataFrame[Series]",
        "function" : "divide",
        "type" : "object",
        "returnType" : "series",
        "description" : "Element-wise division of values in a column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "add" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "value",
              "column"
            ],
            "default" : "value",
            "codegenstyle" : "ignore"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "value"
                    ]
                  },
                  "other" : {
                    "type" : "number",
                    "title" : "value"
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "column"
                    ]
                  },
                  "other" : {
                    "$ref" : "#/definitions/column",
                    "codegenstyle" : "seriesColumn",
                    "title" : "column"
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              }
            ]
          }
        },
        "title" : "[Column] Add to column values",
        "callerObject" : "DataFrame[Series]",
        "function" : "add",
        "type" : "object",
        "returnType" : "series",
        "description" : "Element-wise addition of values in a column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "multiply" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "value",
              "column"
            ],
            "default" : "value",
            "codegenstyle" : "ignore"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "value"
                    ]
                  },
                  "other" : {
                    "type" : "number",
                    "title" : "value"
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "column"
                    ]
                  },
                  "other" : {
                    "$ref" : "#/definitions/column",
                    "codegenstyle" : "seriesColumn",
                    "title" : "column"
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              }
            ]
          }
        },
        "title" : "[Column] Multiply column values",
        "callerObject" : "DataFrame[Series]",
        "function" : "multiply",
        "type" : "object",
        "returnType" : "series",
        "description" : "Element-wise multiplication of values in a column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "pow" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "value",
              "column"
            ],
            "default" : "value",
            "codegenstyle" : "ignore"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "value"
                    ]
                  },
                  "other" : {
                    "type" : "number",
                    "title" : "value"
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "column"
                    ]
                  },
                  "other" : {
                    "$ref" : "#/definitions/column",
                    "codegenstyle" : "seriesColumn",
                    "title" : "column"
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              }
            ]
          }
        },
        "title" : "[Column] Exponentiate column values",
        "callerObject" : "DataFrame[Series]",
        "function" : "pow",
        "type" : "object",
        "returnType" : "series",
        "description" : "Element-wise exponentiation of values in a column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "substract" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "value",
              "column"
            ],
            "default" : "value",
            "codegenstyle" : "ignore"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "value"
                    ]
                  },
                  "other" : {
                    "type" : "number",
                    "title" : "value"
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "column"
                    ]
                  },
                  "other" : {
                    "$ref" : "#/definitions/column",
                    "codegenstyle" : "seriesColumn",
                    "title" : "column"
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              }
            ]
          }
        },
        "title" : "[Column] Substract from column values",
        "callerObject" : "DataFrame[Series]",
        "function" : "substract",
        "type" : "object",
        "returnType" : "series",
        "description" : "Element-wise substraction of values in a column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "mask" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column to change",
            "codegenstyle" : "ignore"
          },
          "cond" : {
            "$ref" : "#/definitions/column",
            "title" : "column with indicator",
            "codegenstyle" : "seriesColumn"
          },
          "other" : {
            "title" : "value",
            "description" : "Value if the condition is true. If it is a text, add quotation marks (e.g. \"text\").",
            "type" : "string",
            "codegenstyle" : "variable"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "cond",
          "other"
        ],
        "title" : "[Column] Change value based on indicator",
        "callerObject" : "DataFrame[Series]",
        "function" : "mask",
        "type" : "object",
        "description" : "Use a column indicator to set a new value. Indicators need to be true/false. If they are 0/1 you need to change the type to boolean first."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "rename_categories" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "new_categories" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "title" : "new categories",
            "description" : "Enter the name of the categories, from small to large."
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "new_categories"
        ],
        "title" : "[Column] Rename categories",
        "type" : "object",
        "callerObject" : "DataFrame[Series].cat",
        "function" : "rename_categories",
        "description" : "Change the names of categories (for example after creating buckets)."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    },
    "factorize" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "sort" : {
            "type" : "string",
            "enum" : [
              "True",
              "False"
            ],
            "default" : "False",
            "title" : "",
            "description" : "Sort the categories (ascending). ",
            "codegenstyle" : "variable"
          },
          "na_sentinel" : {
            "type" : "number",
            "title" : "NaN value",
            "default" : -1,
            "description" : "Value used to replace missing values (NaN)."
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "sort"
        ],
        "title" : "[Column] Encode labels to numbers",
        "type" : "object",
        "callerObject" : "DataFrame[Series]",
        "function" : "factorize",
        "description" : "Encode the object as an enumerated type or categorical variable. E.g. [male,female] -> [0,1].",
        "append" : "[0]"
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      }
    }
  }
}