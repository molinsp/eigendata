{
  "version" : "0.0.40",
  "transformations" : {
    "read_csv" : {
      "form" : {
        "properties" : {
          "filepath_or_buffer" : {
            "type" : "string",
            "title" : "file path",
            "description" : "Location of the file relative to the notebook. E.g. /Documents/Data/testdata.csv."
          },
          "sep" : {
            "type" : "string",
            "default" : ",",
            "title" : "separator",
            "description" : "Character used to separate columns (e.g. commas, semicolons, etc.)."
          },
          "decimal" : {
            "type" : "string",
            "default" : ".",
            "description" : "Character used to indicate decimals."
          },
          "header" : {
            "type" : "number",
            "description" : "Row to use for the column labels (first row is 0)."
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "required" : [
          "filepath_or_buffer"
        ],
        "title" : "Read CSV file",
        "type" : "object",
        "callerObject" : "pd",
        "function" : "read_csv",
        "transformationType" : "dataLoading",
        "description" : "Load the csv in a table."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd",
        "namespace" : "pd"
      },
      "keywords" : [
        "csv",
        "load",
        "read"
      ]
    },
    "read_excel" : {
      "form" : {
        "properties" : {
          "io" : {
            "type" : "string",
            "description" : "Location of the file relative to the notebook. E.g. /Documents/Data/testdata.csv."
          },
          "header" : {
            "type" : "number",
            "description" : "Row to use for the column labels (first row is 0).",
            "default" : 0
          },
          "mode" : {
            "type" : "string",
            "codegenstyle" : "ignore",
            "enum" : [
              "number",
              "name"
            ],
            "enumNames" : [
              "Load using sheet number",
              "Load using sheet name"
            ],
            "default" : "number"
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "required" : [
          "io",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "number"
                    ]
                  },
                  "sheet_name" : {
                    "type" : "number",
                    "title" : "sheet number",
                    "description" : "Number of the sheet (first sheet is 0).",
                    "default" : 0
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "name"
                    ]
                  },
                  "sheet_name" : {
                    "type" : "string",
                    "title" : "sheet name",
                    "description" : "Name of the sheet to load."
                  }
                }
              }
            ]
          }
        },
        "title" : "Read Excel file",
        "type" : "object",
        "callerObject" : "pd",
        "function" : "read_excel",
        "transformationType" : "dataLoading",
        "description" : "Load an excel sheet in a table."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        },
        "mode" : {
          "ui:widget" : "radio"
        },
        "ui:order" : [
          "*",
          "new table name"
        ]
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "excel",
        "load",
        "xlsx",
        "xls",
        "read"
      ]
    },
    "airtable_base_to_df" : {
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      },
      "form" : {
        "properties" : {
          "base" : {
            "description" : "ID of the base. You can get the id from airtable.com/api.",
            "type" : "string"
          },
          "table" : {
            "type" : "string",
            "description" : "Name of the table as shown in Airtable UI."
          },
          "key" : {
            "type" : "string",
            "description" : "API key. You can get the id from airtable.com/api (selecting show API key on the top right)."
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "required" : [
          "base",
          "table",
          "key"
        ],
        "title" : "Read Airtable Base",
        "type" : "object",
        "function" : "airtable_base_to_df",
        "transformationType" : "dataLoading",
        "description" : "Load airtable base"
      },
      "library" : {
        "name" : "fastdata.integrations",
        "importStatement" : "from fastdata.integrations import *"
      },
      "keywords" : [
        "base",
        "load",
        "airtable",
        "read"
      ]
    },
    "df_to_airtable_base" : {
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      },
      "form" : {
        "returnType" : "none",
        "properties" : {
          "data" : {
            "type" : "string",
            "codegenstyle" : "variable",
            "$ref" : "#/definitions/dataframes"
          },
          "base" : {
            "description" : "ID of the base. You can get the id from airtable.com/api.",
            "type" : "string"
          },
          "table" : {
            "type" : "string",
            "description" : "Name of the table as shown in Airtable UI."
          },
          "key" : {
            "type" : "string",
            "description" : "API key. You can get the id from airtable.com/api (selecting show API key on the top right)."
          }
        },
        "required" : [
          "data",
          "base",
          "table",
          "key"
        ],
        "title" : "Save DataFrame to Airtable Base",
        "type" : "object",
        "function" : "df_to_airtable_base",
        "description" : "Save table to airtable.",
        "definitions" : {
          "dataframes" : {
            "type" : "string",
            "enum" : []
          }
        }
      },
      "library" : {
        "name" : "fastdata.integrations",
        "importStatement" : "from fastdata.integrations import *"
      },
      "keywords" : [
        "airtable",
        "base",
        "save",
        "write",
        "upload",
        "connect"
      ]
    },
    "gsheet_to_df" : {
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      },
      "form" : {
        "properties" : {
          "url" : {
            "description" : "URL of the google sheet",
            "type" : "string"
          },
          "start_row" : {
            "description" : "Row number for first row of headers or data.",
            "type" : "number",
            "default" : 1,
            "title" : "start row"
          },
          "sheet" : {
            "type" : "number",
            "default" : 0,
            "description" : "Number of the sheet. First sheet on the left is 0."
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "required" : [
          "url"
        ],
        "title" : "Read Google Sheet",
        "type" : "object",
        "function" : "gsheet_to_df",
        "transformationType" : "dataLoading",
        "description" : "Load airtable base"
      },
      "library" : {
        "name" : "fastdata.integrations",
        "importStatement" : "from fastdata.integrations import *"
      },
      "keywords" : [
        "sheet",
        "google",
        "load",
        "read"
      ]
    },
    "to_csv" : {
      "form" : {
        "properties" : {
          "path_or_buf" : {
            "type" : "string",
            "title" : "file path",
            "description" : "Location of the file. You can also indicate a path to save it in a specific folder."
          },
          "index" : {
            "type" : "string",
            "default" : "False",
            "enum" : [
              "True",
              "False"
            ],
            "enumNames" : [
              "Include index",
              "Exclude index"
            ],
            "codegenstyle" : "variable"
          }
        },
        "required" : [
          "path_or_buf",
          "index"
        ],
        "type" : "object",
        "title" : "Save to CSV",
        "callerObject" : "DataFrame",
        "function" : "to_csv",
        "description" : "Save selected table to csv file.",
        "returnType" : "none"
      },
      "keywords" : [
        "write",
        "save",
        "store"
      ],
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "describe" : {
      "form" : {
        "title" : "Describe column statistics",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "describe",
        "returnType" : "none",
        "description" : "Get statistical distribution of columns."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "overview",
        "statistics",
        "mean"
      ]
    },
    "count_nulls" : {
      "form" : {
        "properties" : {
          "new table name" : {
            "type" : "string",
            "default" : "nulls"
          }
        },
        "title" : "Count nulls",
        "type" : "object",
        "callerObject" : "DataFrame.fdt",
        "function" : "count_nulls",
        "returnType" : "DataFrame",
        "description" : "Get the number of non-null values in each column."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      },
      "library" : {
        "name" : "fastdata.core",
        "importStatement" : "from fastdata.core import *"
      },
      "keywords" : [
        "null",
        "na",
        "empty"
      ]
    },
    "pivot_table" : {
      "form" : {
        "properties" : {
          "index" : {
            "$ref" : "#/definitions/columns",
            "description" : "Rows used in the pivot table."
          },
          "columns" : {
            "$ref" : "#/definitions/columns",
            "description" : "Columns used in the pivot table. Leave blank gor a simple aggregation without columns."
          },
          "mode" : {
            "type" : "string",
            "codegenstyle" : "ignore",
            "enum" : [
              "array",
              "single"
            ],
            "enumNames" : [
              "Aggregate over individual columns",
              "Aggregate over all columns"
            ],
            "default" : "array"
          },
          "index_type" : {
            "type" : "string",
            "title" : "index type",
            "default" : "flat",
            "enum" : [
              "flat",
              "hierarchical"
            ],
            "enumNames" : [
              "Flat",
              "Hierarchical indexes"
            ],
            "description" : "Enable or disable pandas hierarchical indexes."
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "columns" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : []
            }
          },
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "index",
          "aggfunc"
        ],
        "title" : "Pivot table",
        "type" : "object",
        "callerObject" : "DataFrame.fdt",
        "function" : "pivot_table",
        "description" : "Returns a table with aggregations grouped by elements selected in the rows and columns.",
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "array"
                    ]
                  },
                  "aggfunc" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "column" : {
                          "$ref" : "#/definitions/column"
                        },
                        "function" : {
                          "uniqueItems" : true,
                          "type" : "array",
                          "items" : {
                            "codegenstyle" : "variable",
                            "type" : "string",
                            "default" : "Count (excl. missing values)",
                            "enumNames" : [
                              "Count (incl. missing values)",
                              "Count (excl. missing values)",
                              "Count unique",
                              "Mean",
                              "Sum",
                              "Maximum",
                              "Minimum",
                              "Median",
                              "First value",
                              "Last value",
                              "Standard deviation",
                              "Variance"
                            ],
                            "enum" : [
                              "\"size\"",
                              "\"count\"",
                              "\"nunique\"",
                              "\"mean\"",
                              "\"sum\"",
                              "\"max\"",
                              "\"min\"",
                              "\"median\"",
                              "\"first\"",
                              "\"last\"",
                              "\"std\"",
                              "\"var\""
                            ]
                          }
                        }
                      }
                    },
                    "title" : "aggregation",
                    "description" : "Aggregations to perform in the pivot table (e.g. calculating the average)."
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "single"
                    ]
                  },
                  "aggfunc" : {
                    "uniqueItems" : true,
                    "title" : "aggregation",
                    "type" : "array",
                    "items" : {
                      "codegenstyle" : "variable",
                      "type" : "string",
                      "default" : "Count (excl. missing values)",
                      "enumNames" : [
                        "Count (incl. missing values)",
                        "Count (excl. missing values)",
                        "Count unique",
                        "Mean",
                        "Sum",
                        "Maximum",
                        "Minimum",
                        "Median",
                        "First value",
                        "Last value",
                        "Standard deviation",
                        "Variance"
                      ],
                      "enum" : [
                        "\"size\"",
                        "\"count\"",
                        "\"nunique\"",
                        "\"mean\"",
                        "\"sum\"",
                        "\"max\"",
                        "\"min\"",
                        "\"median\"",
                        "\"first\"",
                        "\"last\"",
                        "\"std\"",
                        "\"var\""
                      ]
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        },
        "aggfunc" : {
          "items" : {
            "classNames" : "side-by-side-fields",
            "column" : {
              "classNames" : "left-field"
            },
            "function" : {
              "classNames" : "right-field"
            }
          }
        },
        "mode" : {
          "ui:widget" : "radio"
        },
        "ui:order" : [
          "*",
          "index_type",
          "new table name"
        ]
      },
      "library" : {
        "name" : "fastdata.core",
        "importStatement" : "from fastdata.core import *"
      },
      "keywords" : [
        "aggregation",
        "count",
        "mean",
        "sum",
        "maximum",
        "minimum",
        "median",
        "first",
        "last",
        "standard",
        "variance",
        "unique",
        "deviation",
        "value",
        "for",
        "each",
        "group",
        "by",
        "over"
      ]
    },
    "transpose" : {
      "form" : {
        "properties" : {
          "new table name" : {
            "type" : "string"
          }
        },
        "required" : [],
        "title" : "Transpose dataframe",
        "type" : "object",
        "callerObject" : "DataFrame.fdt",
        "function" : "transpose",
        "description" : "Reflect the table over its main diagonal by writing rows as columns and vice-versa."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        },
        "aggfunc" : {
          "items" : {
            "classNames" : "side-by-side-fields",
            "column" : {
              "classNames" : "left-field"
            },
            "function" : {
              "classNames" : "right-field"
            }
          }
        }
      },
      "library" : {
        "name" : "fastdata.core",
        "importStatement" : "from fastdata.core import *"
      },
      "keywords" : [
        "switch",
        "rows",
        "columns"
      ]
    },
    "get_dummies" : {
      "form" : {
        "required" : [
          "columns"
        ],
        "definitions" : {
          "columns" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : []
            }
          }
        },
        "properties" : {
          "columns" : {
            "$ref" : "#/definitions/columns",
            "description" : "Column(s) expanded into several columns for each distinct value with 0/1 indicators."
          },
          "dummy_na" : {
            "title" : "NaN column",
            "description" : "Include a column called NaN that indicates if the value is missing.",
            "default" : "False",
            "type" : "string",
            "codegenstyle" : "variable",
            "enum" : [
              "True",
              "False"
            ]
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "title" : "Create dummies for a column (0/1 indicators)",
        "description" : "Create new columns with 0/1 for each unique value in a column. Returns table with additional columns.",
        "type" : "object",
        "callerObject" : "pd",
        "function" : "get_dummies",
        "selectionAsParameter" : true
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "1",
        "0",
        "columns"
      ]
    },
    "split_list_to_columns" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column"
          },
          "split_type" : {
            "type" : "string",
            "enum" : [
              "unique",
              "order"
            ],
            "enumNames" : [
              "Indicators for each unique element (0/1)",
              "Split items in order",
              "split_type"
            ],
            "default" : "unique",
            "title" : "split type",
            "description" : "Define how to split the list in the rows to columns."
          },
          "separator" : {
            "type" : "string",
            "default" : ",",
            "description" : "Item that separates the elements. E.g. in [1,2,3] it would be a comma (,), in [1;2;3] a semicolon (;)."
          },
          "list_marker" : {
            "type" : "string",
            "enum" : [
              "na",
              "square_brackets",
              "parentheses"
            ],
            "enumNames" : [
              "No brackets/parentheses",
              "Square brackets []",
              "Parentheses ()"
            ],
            "description" : "Item that surounds the elements. E.g. in [1,2,3] it would be a square brackets, in (1;2;3) parentheses.",
            "default" : "na",
            "title" : "list marker"
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "separator",
          "list_marker"
        ],
        "title" : "Split list to columns",
        "type" : "object",
        "callerObject" : "DataFrame.fdt",
        "function" : "split_list_to_columns",
        "description" : "Create new columns with 0/1 for each unique value in a column with a list (e.g. rows are like [1,2,3]. Returns table with additional columns."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        },
        "aggfunc" : {
          "items" : {
            "classNames" : "side-by-side-fields",
            "column" : {
              "classNames" : "left-field"
            },
            "function" : {
              "classNames" : "right-field"
            }
          }
        }
      },
      "library" : {
        "name" : "fastdata.core",
        "importStatement" : "from fastdata.core import *"
      },
      "keywords" : [
        "expand",
        "explode",
        "separate"
      ]
    },
    "merge" : {
      "form" : {
        "properties" : {
          "right" : {
            "type" : "string",
            "codegenstyle" : "variable",
            "$ref" : "#/definitions/dataframes",
            "description" : "Table to be used to join on the right."
          },
          "how" : {
            "type" : "string",
            "enum" : [
              "inner",
              "left",
              "right",
              "outer"
            ],
            "enumNames" : [
              "Inner: Keep only when left and right match",
              "Left: Return all rows from the left",
              "Right: Keep all rows from the right",
              "Outer: Return all rows from left & right"
            ],
            "default" : "inner",
            "description" : "Type of join to be performed."
          },
          "left_on" : {
            "$ref" : "#/definitions/columns",
            "title" : "left column"
          },
          "right_on" : {
            "$ref" : "#/definitions/right_columns",
            "title" : "right column"
          },
          "suffixes" : {
            "type" : "string",
            "description" : "Add suffixes to the column names after the join. Format needs to be like  (“_x”, “_y”)",
            "codegenstyle" : "variable"
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "columns" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : []
            }
          },
          "dataframes" : {
            "type" : "string",
            "enum" : []
          },
          "right_columns" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : []
            }
          }
        },
        "required" : [
          "right",
          "how",
          "left_on",
          "right_on"
        ],
        "function" : "merge",
        "callerObject" : "DataFrame",
        "type" : "object",
        "title" : "Merge dataframes",
        "description" : "Join the selected table with another table."
      },
      "uischema" : {
        "classNames" : "side-by-side-fields",
        "right" : {
          "classNames" : "left-field",
          "String" : ""
        },
        "how" : {
          "classNames" : "right-field"
        },
        "right_on" : {
          "classNames" : "right-field"
        },
        "left_on" : {
          "classNames" : "left-field"
        },
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table",
          "classNames" : "full-width"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "vlookup",
        "index",
        "match",
        "lookup",
        "join",
        "inner",
        "left",
        "right"
      ]
    },
    "append" : {
      "form" : {
        "properties" : {
          "other" : {
            "type" : "string",
            "codegenstyle" : "variable",
            "$ref" : "#/definitions/dataframes",
            "description" : "Table to append at the bottom."
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "dataframes" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "other"
        ],
        "title" : "Append dataframes",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "append",
        "description" : "Add two tables with the same columns \"on top of each other\". If tables have different columns, they will be kept and populated with NaN for the tables that don't have that column."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "stack"
      ]
    },
    "sort_values" : {
      "form" : {
        "properties" : {
          "by" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "title" : "column"
          },
          "ascending" : {
            "type" : "string",
            "default" : "True",
            "enum" : [
              "True",
              "False"
            ],
            "codegenstyle" : "variable",
            "description" : "Sort the data ascending (ascending=True) or descending (ascending=False)."
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "by",
          "ascending"
        ],
        "title" : "Sort values ",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "sort_values",
        "description" : "Sort the dataframe based on one column. "
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "arrange"
      ]
    },
    "drop" : {
      "form" : {
        "required" : [
          "columns"
        ],
        "definitions" : {
          "columns" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : []
            }
          }
        },
        "properties" : {
          "columns" : {
            "$ref" : "#/definitions/columns",
            "description" : "Select the columns that you want to remove."
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "title" : "Drop columns",
        "description" : "Drop columns from the table.",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "drop"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "remove",
        "exclude"
      ]
    },
    "filter" : {
      "form" : {
        "required" : [
          "items"
        ],
        "definitions" : {
          "columns" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : []
            }
          }
        },
        "properties" : {
          "items" : {
            "$ref" : "#/definitions/columns",
            "description" : "Select the columns that you want to keep."
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "title" : "Filter columns",
        "description" : "Keep only specific columns from the table.",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "filter"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "keep",
        "columns",
        "column",
        "filter",
        "select"
      ]
    },
    "fillna" : {
      "form" : {
        "properties" : {
          "mode" : {
            "type" : "string",
            "enum" : [
              "function",
              "value"
            ],
            "default" : "value",
            "codegenstyle" : "ignore"
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "function"
                    ]
                  },
                  "method" : {
                    "type" : "string",
                    "enum" : [
                      "ffill",
                      "bfill"
                    ],
                    "enumNames" : [
                      "forward fill (take the one above)",
                      "backward fill (take the one below)"
                    ]
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "value"
                    ]
                  },
                  "value" : {
                    "type" : "string",
                    "codegenstyle" : "variable",
                    "description" : ""
                  }
                }
              }
            ]
          }
        },
        "title" : "Fill empty values in all columns",
        "callerObject" : "DataFrame",
        "function" : "fillna",
        "type" : "object",
        "returnType" : "dataframe",
        "description" : "Fill empty values in all columns."
      },
      "uischema" : {
        "value" : {
          "ui:placeholder" : "E.g. \"text\" / 45"
        },
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        },
        "mode" : {
          "ui:widget" : "radio"
        },
        "ui:order" : [
          "*",
          "new table name"
        ]
      },
      "keywords" : [
        "nan",
        "na",
        "null",
        "empty",
        "replace"
      ],
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "remove_indexes" : {
      "form" : {
        "properties" : {
          "axis" : {
            "type" : "string",
            "default" : "all",
            "enum" : [
              "all",
              "index",
              "columns"
            ],
            "enumNames" : [
              "Rows and columns",
              "Rows",
              "Columns"
            ]
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "required" : [
          "axis"
        ],
        "title" : "Remove indexes",
        "description" : "Flatten multi-index in columns and rows.",
        "type" : "object",
        "callerObject" : "DataFrame.fdt",
        "function" : "remove_indexes"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      },
      "library" : {
        "name" : "fastdata.core",
        "importStatement" : "from fastdata.core import *"
      },
      "keywords" : [
        "hierarchical",
        "index"
      ]
    },
    "clean_text_columns" : {
      "form" : {
        "properties" : {
          "columns" : {
            "$ref" : "#/definitions/columns"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "custom",
              "before_character",
              "after_character",
              "email",
              "n_digits",
              "between"
            ],
            "enumNames" : [
              "custom",
              "before character",
              "after character",
              "email",
              "N digits",
              "between"
            ],
            "description" : "Use a preset to clean the text column or enter a custom regular expression."
          },
          "keep_unmatched" : {
            "type" : "string",
            "default" : "False",
            "enum" : [
              "True",
              "False"
            ],
            "codegenstyle" : "variable",
            "title" : "keep unmatched"
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "columns" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : []
            }
          }
        },
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "custom"
                    ],
                    "description" : "Test"
                  },
                  "regex" : {
                    "type" : "string",
                    "description" : "Regular expression to clean data.",
                    "title" : "regular expression"
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "before_character"
                    ]
                  },
                  "character" : {
                    "type" : "string",
                    "description" : "Keep the text before the entered character."
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "after_character"
                    ]
                  },
                  "character" : {
                    "type" : "string",
                    "description" : "Keep the text after the entered character."
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "email"
                    ]
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "n_digits"
                    ]
                  },
                  "digits" : {
                    "type" : "string",
                    "description" : "Extract a number with N digits from text. E.g. enter 5 to extract ZIP codes in an address text."
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "between"
                    ]
                  },
                  "start" : {
                    "type" : "string",
                    "description" : "Extract text after start input. E.g. if text is \"tel:1234#\", entering start as \"tel:\", will start extracting \"1234#\"."
                  },
                  "end" : {
                    "type" : "string",
                    "description" : "Extract text before end input. E.g. if text is \"tel:1234#\", entering end as \"#\", will start extracting extract \"1234\"."
                  }
                }
              }
            ]
          }
        },
        "required" : [
          "columns",
          "mode"
        ],
        "title" : "Clean text from multiple columns",
        "type" : "object",
        "callerObject" : "DataFrame.fdt",
        "function" : "clean_text_columns",
        "description" : "Clean text from column using regex or function.",
        "returnType" : "dataframe"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        },
        "mode" : {
          "ui:widget" : "radio"
        },
        "ui:order" : [
          "*",
          "keep_unmatched",
          "new table name"
        ]
      },
      "library" : {
        "name" : "fastdata.core",
        "importStatement" : "from fastdata.core import *"
      },
      "keywords" : [
        "substring",
        "extract",
        "clean"
      ]
    },
    "rename" : {
      "form" : {
        "properties" : {
          "columns" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "column" : {
                  "$ref" : "#/definitions/column"
                },
                "newname" : {
                  "type" : "string",
                  "title" : "New name"
                }
              }
            },
            "title" : "Columns to rename"
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "columns"
        ],
        "title" : "Rename columns",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "rename",
        "description" : "Change the name of the columns in a table"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        },
        "columns" : {
          "items" : {
            "classNames" : "side-by-side-fields",
            "column" : {
              "classNames" : "left-field"
            },
            "newname" : {
              "classNames" : "right-field"
            }
          }
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "change",
        "rename"
      ]
    },
    "astype" : {
      "form" : {
        "properties" : {
          "dtype" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "column" : {
                  "$ref" : "#/definitions/column"
                },
                "type" : {
                  "type" : "string",
                  "enum" : [
                    "int64",
                    "float64",
                    "string",
                    "bool",
                    "datetime64"
                  ],
                  "enumNames" : [
                    "Integer (e.g. 1, 2, 3)",
                    "Decimal number (e.g. 49.99)",
                    "Text",
                    "Boolean (True/False)",
                    "Date time"
                  ]
                }
              }
            },
            "title" : "Columns to reassign"
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "dtype"
        ],
        "title" : "Assign column types",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "astype",
        "description" : "Change the data type of columns."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        },
        "dtype" : {
          "items" : {
            "classNames" : "side-by-side-fields",
            "column" : {
              "classNames" : "left-field"
            },
            "type" : {
              "classNames" : "right-field"
            }
          }
        }
      },
      "keywords" : [
        "convert",
        "data",
        "type",
        "datatype",
        "types",
        "change",
        "modify"
      ],
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "dropna" : {
      "form" : {
        "required" : [
          "axis",
          "how"
        ],
        "properties" : {
          "axis" : {
            "type" : "string",
            "enum" : [
              "index",
              "columns"
            ],
            "enumNames" : [
              "Rows",
              "Columns"
            ],
            "description" : "Drop rows or columns",
            "default" : "index"
          },
          "how" : {
            "type" : "string",
            "enum" : [
              "any",
              "all"
            ],
            "description" : "Elements that need to be blank to drop the column",
            "default" : "any"
          },
          "subset" : {
            "$ref" : "#/definitions/columns",
            "description" : "List of columns used to drop blanks. If not selected all columns are used. Only valid for axis=rows."
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "title" : "Drop NA",
        "description" : "Drop rows or columns that contain blanks",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "dropna",
        "definitions" : {
          "columns" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : []
            }
          }
        }
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        },
        "columns" : {
          "ui:widget" : "checkboxes"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "nan",
        "na",
        "null",
        "empty",
        "remove",
        "blank"
      ]
    },
    "insert" : {
      "form" : {
        "required" : [
          "loc",
          "column",
          "value"
        ],
        "title" : "[Column] Insert column with constant value",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "insert",
        "description" : "Insert new column with a constant value (same value in all rows).",
        "properties" : {
          "loc" : {
            "type" : "number",
            "default" : 0,
            "description" : "Position at which the column will be created (0 is to the left). If the number is larger than number of columns it will return an error."
          },
          "column" : {
            "type" : "string",
            "title" : "column",
            "description" : "Name of the new column."
          },
          "value" : {
            "type" : "string",
            "codegenstyle" : "variable",
            "description" : "Value to be inserted in the column. Use quotation marks for text."
          }
        },
        "returnType" : "none"
      },
      "uischema" : {
        "value" : {
          "ui:placeholder" : "E.g. \"text\" / 45"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "add",
        "append",
        "insert",
        "create",
        "new",
        "static",
        "constant"
      ]
    },
    "apply" : {
      "form" : {
        "properties" : {
          "func" : {
            "type" : "string",
            "codegenstyle" : "variable",
            "enum" : [
              "pd.to_numeric"
            ],
            "enumNames" : [
              "to numeric"
            ]
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "required" : [
          "func"
        ],
        "title" : "Apply function to all items in dataframe",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "apply",
        "description" : "Apply a function to all the dataframe columns"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "convert",
        "numeric",
        "number"
      ]
    },
    "set_index" : {
      "form" : {
        "properties" : {
          "keys" : {
            "$ref" : "#/definitions/columns",
            "description" : "Columns used in the pivot table. Leave blank gor a simple aggregation without columns."
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "columns" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : []
            }
          }
        },
        "required" : [
          "keys"
        ],
        "title" : "Set index",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "set_index",
        "description" : "Set a column as a dataframe index (e.g. unique identifier for rows)."
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "index"
      ]
    },
    "reset_index" : {
      "form" : {
        "properties" : {
          "new table name" : {
            "type" : "string"
          }
        },
        "title" : "Reset index",
        "type" : "object",
        "callerObject" : "DataFrame",
        "function" : "reset_index",
        "description" : "Reset the index of a dataframe"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "index",
        "remove"
      ]
    },
    "round" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "decimals" : {
            "type" : "number"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "required" : [
          "column",
          "decimals"
        ],
        "title" : "[Column] Round column",
        "type" : "object",
        "callerObject" : "DataFrame[Series]",
        "function" : "round",
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "description" : "Round the values in a numerical column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "contains" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "pat" : {
            "title" : "pattern",
            "description" : "Find this pattern in the column (includes partial matches)",
            "type" : "string"
          },
          "case" : {
            "type" : "string",
            "title" : "case sensitive",
            "enum" : [
              "True",
              "False"
            ],
            "default" : "True",
            "codegenstyle" : "variable"
          },
          "regex" : {
            "type" : "string",
            "enum" : [
              "True",
              "False"
            ],
            "default" : "False",
            "title" : "regular expression",
            "description" : "[Advanced] extraction using a regular expression.",
            "codegenstyle" : "variable"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "pat"
        ],
        "title" : "[Column] Find contained text",
        "type" : "object",
        "callerObject" : "DataFrame[Series].str",
        "function" : "contains",
        "description" : "Check if the given pattern is contained in a text column. Returns true/false depending on if the text is found."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "find",
        "locate",
        "check"
      ]
    },
    "clean_text_column" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "custom",
              "before_character",
              "after_character",
              "email",
              "n_digits",
              "between"
            ],
            "enumNames" : [
              "custom",
              "before character",
              "after character",
              "email",
              "N digits",
              "between"
            ],
            "description" : "Use a preset to clean the text column or enter a custom regular expression."
          },
          "keep_unmatched" : {
            "type" : "string",
            "default" : "False",
            "enum" : [
              "True",
              "False"
            ],
            "codegenstyle" : "variable",
            "title" : "keep unmatched"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "custom"
                    ]
                  },
                  "regex" : {
                    "type" : "string",
                    "description" : "Regular expression to clean data."
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "before_character"
                    ]
                  },
                  "character" : {
                    "type" : "string",
                    "description" : "Keep the text before the entered character."
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "after_character"
                    ]
                  },
                  "character" : {
                    "type" : "string",
                    "description" : "Keep the text after the entered character."
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "email"
                    ]
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "n_digits"
                    ]
                  },
                  "digits" : {
                    "type" : "string",
                    "description" : "Use a preset to clean the text column or enter a custom regular expression."
                  },
                  "keep_unmatched" : {
                    "type" : "string",
                    "default" : "False",
                    "enum" : [
                      "True",
                      "False"
                    ],
                    "codegenstyle" : "variable",
                    "title" : "keep unmatched"
                  },
                  "new column name" : {
                    "type" : "string"
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "between"
                    ]
                  },
                  "start" : {
                    "type" : "string",
                    "description" : "Extract text after start input. E.g. if text is \"tel:1234#\", entering start as \"tel:\", will start extracting \"1234#\"."
                  },
                  "end" : {
                    "type" : "string",
                    "description" : "Extract text before end input. E.g. if text is \"tel:1234#\", entering end as \"#\", will start extracting extract \"1234\"."
                  }
                }
              }
            ]
          }
        },
        "required" : [
          "column",
          "mode"
        ],
        "title" : "[Column] Clean text from column",
        "type" : "object",
        "callerObject" : "DataFrame[Series].fdt",
        "function" : "clean_text_column",
        "description" : "Clean text from column using regex or function.",
        "returnType" : "series"
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        },
        "mode" : {
          "ui:widget" : "radio"
        },
        "ui:order" : [
          "*",
          "keep_unmatched",
          "new column name"
        ]
      },
      "library" : {
        "name" : "fastdata.core",
        "importStatement" : "from fastdata.core import *"
      },
      "keywords" : [
        "substring",
        "extract",
        "clean"
      ]
    },
    "find" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "sub" : {
            "type" : "string",
            "title" : "substring",
            "description" : "Find this pattern in the column (includes partial matches)"
          },
          "start" : {
            "type" : "number",
            "description" : "Optional. Position at which to start searching (starting at 0). Inclusive."
          },
          "end" : {
            "type" : "number",
            "description" : "Optional. Position at which to start searching (starting at 0). Exclusive."
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "sub"
        ],
        "title" : "[Column] Find text position",
        "callerObject" : "DataFrame[Series].str",
        "function" : "find",
        "type" : "object",
        "description" : "Find the position of a text fragment within a column. Return a position number or -1 if the text is not found."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "position",
        "locate"
      ]
    },
    "replace" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "pat" : {
            "type" : "string",
            "title" : "pattern",
            "description" : "Text to replace"
          },
          "repl" : {
            "type" : "string",
            "title" : "replacement text"
          },
          "case" : {
            "type" : "string",
            "title" : "case sensitive",
            "enum" : [
              "True",
              "False"
            ],
            "default" : "True",
            "codegenstyle" : "variable"
          },
          "n" : {
            "title" : "Number of replacements",
            "type" : "number",
            "description" : "Number of replacements to perform if there is more than 1 match. To replace all leave as -1.",
            "default" : -1
          },
          "regex" : {
            "type" : "string",
            "enum" : [
              "True",
              "False"
            ],
            "default" : "False",
            "title" : "regular expression",
            "description" : "[Advanced] extraction using a regular expression.",
            "codegenstyle" : "variable"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "required" : [
          "column",
          "pat",
          "repl"
        ],
        "type" : "object",
        "title" : "[Column] Replace text pattern",
        "callerObject" : "DataFrame[Series].str",
        "function" : "replace",
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "description" : "Replace text contained in a text column with new text."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "change"
      ]
    },
    "map" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "arg" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "value_from" : {
                  "type" : "string",
                  "title" : "value from"
                },
                "value_to" : {
                  "type" : "string",
                  "title" : "value to"
                }
              }
            },
            "title" : "Values to map"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "required" : [
          "column"
        ],
        "type" : "object",
        "title" : "[Column] Map text",
        "callerObject" : "DataFrame[Series]",
        "function" : "map",
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "description" : "Map (i.e. replace) text form A->B."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        },
        "arg" : {
          "items" : {
            "classNames" : "side-by-side-fields",
            "value_from" : {
              "classNames" : "left-field"
            },
            "value_to" : {
              "classNames" : "right-field"
            }
          }
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "change",
        "replace"
      ]
    },
    "mean" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "new variable name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Mean of column values",
        "callerObject" : "DataFrame[Series]",
        "function" : "mean",
        "type" : "object",
        "description" : "Returns a variable with the mean of all values from a column."
      },
      "uischema" : {
        "new variable name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "average"
      ]
    },
    "sum" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "new variable name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Sum of column values",
        "callerObject" : "DataFrame[Series]",
        "function" : "sum",
        "type" : "object",
        "description" : "Returns a variable with the sum of all values from a column."
      },
      "uischema" : {
        "new variable name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "var" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "new variable name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Variance",
        "callerObject" : "DataFrame[Series]",
        "function" : "var",
        "type" : "object",
        "description" : "Returns a variable with the variance of all values from a column."
      },
      "uischema" : {
        "new variable name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "std" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "new variable name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Standard deviation",
        "callerObject" : "DataFrame[Series]",
        "function" : "std",
        "type" : "object",
        "description" : "Returns a variable with the standard deviation of all values from a column."
      },
      "uischema" : {
        "new variable name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "bin_column" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "size",
              "number",
              "quantiles",
              "custom"
            ],
            "enumNames" : [
              "Size of bin",
              "Number of bins",
              "Quantiles (e.g. quartiles)",
              "Custom interval ranges"
            ],
            "default" : "size"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "size"
                    ]
                  },
                  "start" : {
                    "type" : "number",
                    "description" : "Non-inclusive: Sart the bucket above this number. For example, if start is set at 5, bucketing will start at 6."
                  },
                  "size" : {
                    "type" : "number",
                    "description" : "Inclusive: Take buckets of this size. For example, if start is set at 5, and size to 10, it will pick up elements from 6 to 15, including 15."
                  },
                  "end" : {
                    "type" : "number",
                    "description" : "Inclusive: Number at which to end the buckets. E.g. if start = 5, size =10 and end is set to 17, it will only create a category (5,15]. The next valid end would be 25."
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "number"
                    ]
                  },
                  "bin_number" : {
                    "type" : "number",
                    "title" : "bin number",
                    "description" : "Number of equally spaced bins used. Bin width is then (max-min)/bin number."
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "quantiles"
                    ]
                  },
                  "quantiles" : {
                    "type" : "number",
                    "description" : "Number of quantiles. 10 for deciles, 4 for quartiles, etc."
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "custom"
                    ]
                  },
                  "breaks" : {
                    "description" : "Set the break points for the custom ranges. Need to include start and end elements",
                    "type" : "array",
                    "items" : {
                      "type" : "number"
                    }
                  },
                  "closed" : {
                    "type" : "string",
                    "enum" : [
                      "left",
                      "right",
                      "both",
                      "neither"
                    ],
                    "description" : "For example, breaks of [1, 3, 5 o] closed on the right implies that nubmer 3 will be part of the interval (1-3]. If closed on the let, then 3 would be part of interval [3-5)"
                  }
                }
              }
            ]
          }
        },
        "title" : "[Column] Bin column",
        "callerObject" : "DataFrame[Series].fdt",
        "function" : "bin_column",
        "type" : "object",
        "returnType" : "series",
        "description" : "Creates bins/bukets for columns with numerical values."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        },
        "mode" : {
          "ui:widget" : "radio"
        },
        "ui:order" : [
          "*",
          "new column name"
        ]
      },
      "library" : {
        "name" : "fastdata.core",
        "importStatement" : "from fastdata.core import *"
      },
      "keywords" : [
        "bin",
        "bucket",
        "group"
      ]
    },
    "extract_json" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "path" : {
            "type" : "string",
            "description" : "See examples here https://jmespath.org/examples.html"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "required" : [
          "path",
          "column"
        ],
        "title" : "[Column] Extract JSON",
        "description" : "Extract json using path",
        "type" : "object",
        "callerObject" : "DataFrame[Series].fdt",
        "function" : "extract_json",
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        }
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "fastdata.core",
        "importStatement" : "from fastdata.core import *"
      },
      "keywords" : [
        "hierarchical",
        "index"
      ]
    },
    "add_timedelta" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "value" : {
            "type" : "string",
            "description" : "Can be negative or positive. Accept text following this format \"2 days 2 hours 15 minutes 30 seconds\""
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "required" : [
          "value",
          "column"
        ],
        "title" : "[Column] Calculate time difference",
        "description" : "Calculate time difference",
        "type" : "object",
        "callerObject" : "DataFrame[Series].fdt",
        "function" : "add_timedelta",
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        }
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "fastdata.core",
        "importStatement" : "from fastdata.core import *"
      },
      "keywords" : [
        "time",
        "date",
        "day",
        "month",
        "year",
        "minute",
        "add",
        "subtract",
        "calculate"
      ]
    },
    "fill_empty" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "function",
              "value"
            ],
            "default" : "function"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "function"
                    ]
                  },
                  "function" : {
                    "type" : "string",
                    "enum" : [
                      "ffill",
                      "bfill",
                      "most_frequent",
                      "mean"
                    ],
                    "enumNames" : [
                      "forward fill (take the one above)",
                      "backward fill (take the one below)",
                      "most frequent",
                      "average/mean"
                    ]
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "value"
                    ]
                  },
                  "value" : {
                    "type" : "string",
                    "codegenstyle" : "variable",
                    "description" : ""
                  }
                }
              }
            ]
          }
        },
        "title" : "[Column] Fill empty values",
        "callerObject" : "DataFrame[Series].fdt",
        "function" : "fill_empty",
        "type" : "object",
        "returnType" : "series",
        "description" : "Fill empty values in a column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        },
        "value" : {
          "ui:placeholder" : "E.g. \"text\" / 45"
        },
        "mode" : {
          "ui:widget" : "radio"
        },
        "ui:order" : [
          "*",
          "new column name"
        ]
      },
      "keywords" : [
        "nan",
        "na",
        "null",
        "empty",
        "replace"
      ],
      "library" : {
        "name" : "fastdata.core",
        "importStatement" : "from fastdata.core import *"
      }
    },
    "uppercase" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Set text to upper case",
        "callerObject" : "DataFrame[Series].str",
        "function" : "upper",
        "type" : "object",
        "description" : "Set the text in a column to upper case."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "lowercase" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Set text to lower case",
        "callerObject" : "DataFrame[Series].str",
        "function" : "lower",
        "type" : "object",
        "description" : "Set the text in a column to lower case."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "to_datetime" : {
      "form" : {
        "properties" : {
          "arg" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "seriesColumn"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "string",
              "number"
            ],
            "codegenstyle" : "ignore",
            "enumNames" : [
              "From text (e.g. 20-02-2020)",
              "From number (e.g. 1605552766)"
            ],
            "default" : "string"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "arg",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "string"
                    ]
                  },
                  "format" : {
                    "type" : "string",
                    "description" : "Examples: %d/%m/%Y (day/month/year), %H:%M:%S (hour:minute:second)"
                  }
                }
              },
              {
                "String" : "From number",
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "number"
                    ]
                  },
                  "unit" : {
                    "type" : "string",
                    "enum" : [
                      "D",
                      "s",
                      "ms",
                      "us",
                      "ns"
                    ],
                    "enumNames" : [
                      "Day",
                      "Second",
                      "Milisecond",
                      "Microsecond",
                      "Nanosecond"
                    ],
                    "default" : "ns",
                    "description" : "Unit of the date column."
                  }
                }
              }
            ]
          }
        },
        "title" : "[Column] Convert column to datetime",
        "type" : "object",
        "callerObject" : "pd",
        "function" : "to_datetime",
        "description" : "Converts a column to a date-time format using the specified rules.",
        "returnType" : "series"
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        },
        "mode" : {
          "ui:widget" : "radio"
        },
        "ui:order" : [
          "*",
          "new column name"
        ]
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "convert",
        "date"
      ]
    },
    "year" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Get year",
        "callerObject" : "DataFrame[Series].dt",
        "function" : "year",
        "type" : "object",
        "transformationType" : "property",
        "description" : "Gets the year value from a datetime column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "month" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Get month number",
        "callerObject" : "DataFrame[Series].dt",
        "function" : "month",
        "type" : "object",
        "transformationType" : "property",
        "description" : "Gets the month value from a datetime column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "day" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Get day number",
        "callerObject" : "DataFrame[Series].dt",
        "function" : "day",
        "type" : "object",
        "transformationType" : "property",
        "description" : "Gets the day value from a datetime column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "dayofweek" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Get weekday number",
        "callerObject" : "DataFrame[Series].dt",
        "function" : "dayofweek",
        "type" : "object",
        "transformationType" : "property",
        "description" : "Gets the day value from a datetime column. Returns a number assuming Monday=0 and Sunday=6."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "day_name" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Get weekday name",
        "callerObject" : "DataFrame[Series].dt",
        "function" : "day_name",
        "type" : "object",
        "description" : "Gets the day name from a datetime column. Returns text ilke \"Monday\"."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "hour" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Get datetime hour",
        "callerObject" : "DataFrame[Series].dt",
        "function" : "hour",
        "type" : "object",
        "transformationType" : "property",
        "description" : "Gets the hour value from a datetime column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "minute" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column"
        ],
        "title" : "[Column] Get datetime minute",
        "callerObject" : "DataFrame[Series].dt",
        "function" : "minute",
        "type" : "object",
        "transformationType" : "property",
        "description" : "Gets the minute value from a datetime column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "divide" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "value",
              "column"
            ],
            "default" : "value",
            "codegenstyle" : "ignore",
            "enumNames" : [
              "Divide by a value",
              "Divide by another column"
            ]
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "value"
                    ]
                  },
                  "other" : {
                    "type" : "number",
                    "title" : "value"
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "column"
                    ]
                  },
                  "other" : {
                    "$ref" : "#/definitions/column",
                    "codegenstyle" : "seriesColumn",
                    "title" : "column"
                  }
                }
              }
            ]
          }
        },
        "title" : "[Column] Divide column values",
        "callerObject" : "DataFrame[Series]",
        "function" : "divide",
        "type" : "object",
        "returnType" : "series",
        "description" : "Element-wise division of values in a column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        },
        "mode" : {
          "ui:widget" : "radio"
        },
        "ui:order" : [
          "*",
          "new column name"
        ]
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "multiply" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "value",
              "column"
            ],
            "default" : "value",
            "codegenstyle" : "ignore",
            "enumNames" : [
              "Multiply by a value",
              "Multiply by another column"
            ]
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "value"
                    ]
                  },
                  "other" : {
                    "type" : "number",
                    "title" : "value"
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "column"
                    ]
                  },
                  "other" : {
                    "$ref" : "#/definitions/column",
                    "codegenstyle" : "seriesColumn",
                    "title" : "column"
                  }
                }
              }
            ]
          }
        },
        "title" : "[Column] Multiply column values",
        "callerObject" : "DataFrame[Series]",
        "function" : "multiply",
        "type" : "object",
        "returnType" : "series",
        "description" : "Element-wise multiplication of values in a column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        },
        "mode" : {
          "ui:widget" : "radio"
        },
        "ui:order" : [
          "*",
          "new column name"
        ]
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "pow" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "value",
              "column"
            ],
            "default" : "value",
            "codegenstyle" : "ignore",
            "enumNames" : [
              "Exponentiate by a value",
              "Exponentiate by another column"
            ]
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "value"
                    ]
                  },
                  "other" : {
                    "type" : "number",
                    "title" : "value"
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "column"
                    ]
                  },
                  "other" : {
                    "$ref" : "#/definitions/column",
                    "codegenstyle" : "seriesColumn",
                    "title" : "column"
                  }
                }
              }
            ]
          }
        },
        "title" : "[Column] Exponentiate column values",
        "callerObject" : "DataFrame[Series]",
        "function" : "pow",
        "type" : "object",
        "returnType" : "series",
        "description" : "Element-wise exponentiation of values in a column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        },
        "mode" : {
          "ui:widget" : "radio"
        },
        "ui:order" : [
          "*",
          "new column name"
        ]
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "add" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "value",
              "column"
            ],
            "default" : "value",
            "codegenstyle" : "ignore",
            "enumNames" : [
              "Add a value",
              "Add another column"
            ]
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "value"
                    ]
                  },
                  "other" : {
                    "type" : "number",
                    "title" : "value"
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "column"
                    ]
                  },
                  "other" : {
                    "$ref" : "#/definitions/column",
                    "codegenstyle" : "seriesColumn",
                    "title" : "column"
                  }
                }
              }
            ]
          }
        },
        "title" : "[Column] Sum",
        "callerObject" : "DataFrame[Series]",
        "function" : "add",
        "type" : "object",
        "returnType" : "series",
        "description" : "Element-wise addition of values in a column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        },
        "mode" : {
          "ui:widget" : "radio"
        },
        "ui:order" : [
          "*",
          "new column name"
        ]
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "sum"
      ]
    },
    "subtract" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "mode" : {
            "type" : "string",
            "enum" : [
              "value",
              "column"
            ],
            "default" : "value",
            "codegenstyle" : "ignore",
            "enumNames" : [
              "Subtract a value",
              "Subtract another column"
            ]
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "mode"
        ],
        "dependencies" : {
          "mode" : {
            "oneOf" : [
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "value"
                    ]
                  },
                  "other" : {
                    "type" : "number",
                    "title" : "value"
                  }
                }
              },
              {
                "properties" : {
                  "mode" : {
                    "enum" : [
                      "column"
                    ]
                  },
                  "other" : {
                    "$ref" : "#/definitions/column",
                    "codegenstyle" : "seriesColumn",
                    "title" : "column"
                  }
                }
              }
            ]
          }
        },
        "title" : "[Column] Subtract from column values",
        "callerObject" : "DataFrame[Series]",
        "function" : "subtract",
        "type" : "object",
        "returnType" : "series",
        "description" : "Element-wise subtraction of values in a column."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        },
        "mode" : {
          "ui:widget" : "radio"
        },
        "ui:order" : [
          "*",
          "new column name"
        ]
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "minus",
        "difference"
      ]
    },
    "replace_based_on_condition" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "description" : "column to change",
            "codegenstyle" : "ignore"
          },
          "cond" : {
            "$ref" : "#/definitions/column",
            "title" : "condition column",
            "codegenstyle" : "seriesColumn",
            "description" : "Boolean column condaining True/False indicators."
          },
          "when" : {
            "type" : "string",
            "enum" : [
              "True",
              "False"
            ],
            "description" : "Replace when the indicator column is True/False.",
            "default" : "True",
            "codegenstyle" : "variable"
          },
          "replace_with" : {
            "title" : "replace with",
            "description" : "Value if the condition is true. Use quotation marks for text.",
            "type" : "string",
            "codegenstyle" : "variable"
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "cond",
          "replace_with",
          "when"
        ],
        "title" : "[Column] Replace based on condition",
        "callerObject" : "DataFrame[Series].fdt",
        "function" : "replace_based_on_condition",
        "type" : "object",
        "description" : "Use a column indicator to set a new value. Indicators need to be true/false. If they are 0/1 you need to change the type to boolean first."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        },
        "replace_with" : {
          "ui:placeholder" : "E.g. \"text\" / 45"
        }
      },
      "library" : {
        "name" : "fastdata.core",
        "importStatement" : "from fastdata.core import *"
      },
      "keywords" : [
        "new",
        "true",
        "false",
        "if"
      ]
    },
    "rename_categories" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "new_categories" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "title" : "new categories",
            "description" : "Enter the name of the categories, from small to large."
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "new_categories"
        ],
        "title" : "[Column] Rename categories",
        "type" : "object",
        "callerObject" : "DataFrame[Series].cat",
        "function" : "rename_categories",
        "description" : "Change the names of categories (for example after creating buckets)."
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "change",
        "name",
        "category"
      ]
    },
    "factorize" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "sort" : {
            "type" : "string",
            "enum" : [
              "True",
              "False"
            ],
            "default" : "False",
            "description" : "Sort the categories (ascending). ",
            "codegenstyle" : "variable"
          },
          "na_sentinel" : {
            "type" : "number",
            "title" : "NaN value",
            "default" : -1,
            "description" : "Value used to replace missing values (NaN)."
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "required" : [
          "column",
          "sort"
        ],
        "title" : "[Column] Encode labels to numbers",
        "type" : "object",
        "callerObject" : "DataFrame[Series]",
        "function" : "factorize",
        "description" : "Encode the object as an enumerated type or categorical variable. E.g. [male,female] -> [0,1].",
        "append" : "[0]"
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "to",
        "numbers"
      ]
    },
    "strip" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "to_strip" : {
            "title" : "to strip",
            "type" : "string",
            "description" : "Characters to strip. Leave blank to remove spaces."
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "title" : "[Column] Remove leading and trailing characters",
        "type" : "object",
        "callerObject" : "DataFrame[Series].str",
        "function" : "strip",
        "description" : "Remove leading and trailing characters of a text column.",
        "required" : [
          "column"
        ]
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      }
    },
    "lstrip" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "to_strip" : {
            "title" : "to strip",
            "type" : "string",
            "description" : "Characters to strip. Leave blank to remove spaces."
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "title" : "[Column] Remove leading characters",
        "type" : "object",
        "callerObject" : "DataFrame[Series].str",
        "function" : "lstrip",
        "description" : "Remove leading characters of a text column.",
        "required" : [
          "column"
        ]
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "left",
        "from"
      ]
    },
    "rstrip" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "codegenstyle" : "ignore"
          },
          "to_strip" : {
            "title" : "to strip",
            "type" : "string",
            "description" : "Characters to strip. Leave blank to remove spaces."
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "title" : "[Column] Remove trailing characters",
        "type" : "object",
        "callerObject" : "DataFrame[Series].str",
        "function" : "rstrip",
        "description" : "Remove trailing characters of a text column.",
        "required" : [
          "column"
        ]
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "right",
        "from"
      ]
    },
    "slice" : {
      "form" : {
        "properties" : {
          "column" : {
            "$ref" : "#/definitions/column",
            "title" : "column",
            "codegenstyle" : "ignore"
          },
          "start" : {
            "type" : "number",
            "description" : "Start position (counting from 0). Inclusive."
          },
          "step" : {
            "type" : "number",
            "description" : "Only get X characters. If left empty gets all the characters. E.g. step 2 for \"koala\" would extract \"k\" , \"a\" and \"a\"."
          },
          "stop" : {
            "type" : "number",
            "description" : "End position. Exclusive."
          },
          "new column name" : {
            "type" : "string"
          }
        },
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "title" : "[Column] Get text by position",
        "type" : "object",
        "callerObject" : "DataFrame[Series].str",
        "function" : "slice",
        "description" : "Get a subset of a string using position indexes.",
        "required" : [
          "column"
        ]
      },
      "uischema" : {
        "new column name" : {
          "ui:placeholder" : "Leave blank to modify selected column"
        }
      },
      "library" : {
        "name" : "pandas",
        "importStatement" : "import pandas as pd"
      },
      "keywords" : [
        "substring",
        "mid",
        "left",
        "right"
      ]
    },
    "line" : {
      "form" : {
        "properties" : {
          "x" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Column to use for the x axis."
          },
          "y" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Column to use for the y axis."
          },
          "color" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Plot one line for each distinct value in the selected column (Group by)."
          },
          "facet_col" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Create one plot for each of the values in this variable as a column.",
            "title" : "facet column"
          },
          "facet_row" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Create one plot for each of the values in this variable as a row.",
            "title" : "facet row"
          },
          "title" : {
            "type" : "string",
            "description" : "The figure title."
          },
          "labels" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "column" : {
                  "$ref" : "#/definitions/column"
                },
                "label" : {
                  "type" : "string"
                }
              }
            },
            "title" : "labels",
            "description" : "Rename the labels of the chart to make it more readable."
          }
        },
        "required" : [
          "x",
          "y"
        ],
        "type" : "object",
        "title" : "[Charts] Line chart",
        "callerObject" : "px",
        "function" : "line",
        "description" : "Generate a line chart",
        "returnType" : "none",
        "selectionAsParameter" : true,
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        }
      },
      "keywords" : [
        "plot",
        "chart"
      ],
      "library" : {
        "name" : "plotly.express",
        "importStatement" : "import plotly.express as px"
      }
    },
    "bar" : {
      "form" : {
        "properties" : {
          "x" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Column to use for the x axis."
          },
          "y" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Column to use for the y axis."
          },
          "color" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Plot one line for each distinct value in the selected column (Group by)."
          },
          "facet_col" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Create one plot for each of the values in this variable as a column.",
            "title" : "facet column"
          },
          "facet_row" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Create one plot for each of the values in this variable as a row.",
            "title" : "facet row"
          },
          "title" : {
            "type" : "string",
            "description" : "The figure title."
          },
          "labels" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "column" : {
                  "$ref" : "#/definitions/column"
                },
                "label" : {
                  "type" : "string"
                }
              }
            },
            "title" : "labels",
            "description" : "Rename the labels of the chart to make it more readable."
          }
        },
        "required" : [
          "x",
          "y"
        ],
        "type" : "object",
        "title" : "[Charts] Bar chart",
        "callerObject" : "px",
        "function" : "bar",
        "description" : "Generate a line chart",
        "returnType" : "none",
        "selectionAsParameter" : true,
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        }
      },
      "keywords" : [
        "write"
      ],
      "library" : {
        "name" : "plotly.express",
        "importStatement" : "import plotly.express as px"
      }
    },
    "scatter" : {
      "form" : {
        "properties" : {
          "x" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Column to use for the x axis."
          },
          "y" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Column to use for the y axis."
          },
          "color" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Plot one line for each distinct value in the selected column (Group by)."
          },
          "size" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Size of the scatter points based on a variable."
          },
          "facet_col" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Create one plot for each of the values in this variable as a column.",
            "title" : "facet column"
          },
          "facet_row" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Create one plot for each of the values in this variable as a row.",
            "title" : "facet row"
          },
          "hover_data" : {
            "type" : "string",
            "$ref" : "#/definitions/columns",
            "description" : "Information to display on hover",
            "title" : "hover data"
          },
          "labels" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "column" : {
                  "$ref" : "#/definitions/column"
                },
                "label" : {
                  "type" : "string"
                }
              }
            },
            "title" : "labels",
            "description" : "Rename the labels of the chart to make it more readable."
          },
          "title" : {
            "type" : "string",
            "description" : "The figure title."
          }
        },
        "required" : [
          "x",
          "y"
        ],
        "type" : "object",
        "title" : "[Charts] Scatter plot",
        "callerObject" : "px",
        "function" : "scatter",
        "description" : "Generate a line chart",
        "returnType" : "none",
        "selectionAsParameter" : true,
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          },
          "columns" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "enum" : []
            }
          }
        }
      },
      "keywords" : [
        "plot",
        "chart"
      ],
      "library" : {
        "name" : "plotly.express",
        "importStatement" : "import plotly.express as px"
      }
    },
    "histogram" : {
      "form" : {
        "properties" : {
          "x" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Column to use for the x axis."
          },
          "bins" : {
            "type" : "number",
            "description" : "Number of bins."
          },
          "title" : {
            "type" : "string",
            "description" : "The figure title."
          }
        },
        "required" : [
          "x"
        ],
        "type" : "object",
        "title" : "[Charts] Histogram",
        "callerObject" : "px",
        "function" : "histogram",
        "description" : "Plots the distribution of values for a variable",
        "returnType" : "none",
        "selectionAsParameter" : true,
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        }
      },
      "keywords" : [
        "plot",
        "chart"
      ],
      "library" : {
        "name" : "plotly.express",
        "importStatement" : "import plotly.express as px"
      }
    },
    "pie" : {
      "form" : {
        "properties" : {
          "values" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Set values associated to sectors."
          },
          "names" : {
            "type" : "string",
            "$ref" : "#/definitions/column",
            "description" : "Labels for sectors."
          },
          "title" : {
            "type" : "string",
            "description" : "The figure title."
          }
        },
        "required" : [
          "values"
        ],
        "type" : "object",
        "title" : "[Charts] Pie Chart",
        "callerObject" : "px",
        "function" : "pie",
        "description" : "Generate a pie chart.",
        "returnType" : "none",
        "selectionAsParameter" : true,
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        }
      },
      "keywords" : [
        "plot",
        "chart"
      ],
      "library" : {
        "name" : "plotly.express",
        "importStatement" : "import plotly.express as px"
      }
    },
    "euclidean_distance" : {
      "form" : {
        "properties" : {
          "df2" : {
            "type" : "string",
            "codegenstyle" : "variable",
            "$ref" : "#/definitions/dataframes",
            "description" : "Second dataframe"
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "required" : [
          "df2"
        ],
        "type" : "object",
        "title" : "[Snippet] Euclidean distance",
        "function" : "euclidean_distance",
        "description" : "Calculate the row-wise euclidean distance between two dataframes with the same columns. Returns a dataframe with the index of the first dataframe and the corresponding euclidean distances.",
        "returnType" : "DataFrame",
        "definitions" : {
          "dataframes" : {
            "type" : "string",
            "enum" : []
          }
        },
        "selectionAsParameter" : true
      },
      "snippet" : {
        "code" : "def euclidean_distance(df1, df2):\n    import numpy as np\n    eucl_d = np.linalg.norm(df1.values - df2.values, axis=1)\n    return pd.DataFrame({'eucl_d':eucl_d}, index=df1.index).reset_index()",
        "name" : "euclidean_distance"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      }
    },
    "analyze_multi_column_selection" : {
      "form" : {
        "properties" : {
          "column_indices" : {
            "type" : "string",
            "codegenstyle" : "variable",
            "description" : "Enter column numbers as [start, finish], e.g. [6,7]. First column is 0.",
            "title" : "column indices"
          },
          "keyword" : {
            "type" : "string"
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "required" : [],
        "type" : "object",
        "title" : "[Snippet] Analyze multi-column selections",
        "function" : "analyze_multi_column_selection",
        "description" : "Analyze multi-select as dummy columns",
        "returnType" : "DataFrame",
        "definitions" : {
          "column" : {
            "type" : "string",
            "enum" : []
          }
        },
        "selectionAsParameter" : true
      },
      "snippet" : {
        "code" : "def analyze_multi_column_selection(df, column_indices, keyword):\n    res = {'category':[],'count': []}\n    for name, val in data.iloc[:,column_indices[0]:column_indices[1]].iteritems():\n        res['count'].append((val == keyword).sum())\n        res['category'].append(name)\n    return pd.DataFrame(res)",
        "name" : "analyze_multi_column_selection"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      }
    },
    "read_csv_folder" : {
      "form" : {
        "properties" : {
          "folder_path" : {
            "description" : "Path of the folder with csv files.",
            "type" : "string",
            "title" : "folder path"
          },
          "file_prefix" : {
            "type" : "string",
            "title" : "file prefix",
            "description" : "The prefix is the part of the filenames that is always the same. If indicated, it will use this info to generate a column that identifies the files. E.g. if the files are called “data_01”, “data_02”, etc.; then setting prefix as “data_” will create a column with values 01, 02, etc.  \n\n"
          },
          "file_col_name" : {
            "type" : "string",
            "description" : "If you set a file prefix, this parameter sets the name of the column that identifies the different files. If not specified, it will be called \"file\".",
            "title" : "file column name"
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "required" : [
          "folder_path"
        ],
        "type" : "object",
        "title" : "[Snippet] Read csv folder",
        "function" : "read_csv_folder",
        "description" : "Read several csv files form a folder and stack them together.",
        "returnType" : "DataFrame",
        "transformationType" : "dataLoading"
      },
      "snippet" : {
        "code" : "import pandas as pd\nimport glob\ndef read_csv_folder(folder_path, file_prefix=None, file_col_name=None):\n    all_files = glob.glob(folder_path + \"/*.csv\")\n\n    li = []\n    for filename in all_files:\n        \n        df = pd.read_csv(filename, index_col=None, header=0)\n        if file_prefix != None:\n            \n            if file_col_name == None: file_col_name = 'file'\n            \n            col_value = filename.strip(folder_path + '/' + 'players_').strip('.csv')\n            df.insert(\n                loc=0, \n                column=file_col_name, \n                value=col_value)\n        \n        li.append(df)\n\n    return pd.concat(li, axis=0, ignore_index=True)",
        "name" : "read_csv_folder"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      }
    },
    "get_ftp_csv" : {
      "form" : {
        "properties" : {
          "server_url" : {
            "type" : "string",
            "title" : "server url"
          },
          "user" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "folder" : {
            "type" : "string"
          },
          "filename" : {
            "type" : "string"
          },
          "sep" : {
            "type" : "string"
          },
          "new table name" : {
            "type" : "string"
          }
        },
        "required" : [
          "server_url",
          "user",
          "password",
          "folder",
          "filename",
          "sep"
        ],
        "type" : "object",
        "title" : "[Snippet] Get csv from FTP server",
        "function" : "get_ftp_csv",
        "description" : "Get a csv file from an FTP server",
        "returnType" : "DataFrame",
        "transformationType" : "dataLoading"
      },
      "snippet" : {
        "code" : "from ftplib import FTP\nimport io\nimport pandas as pd\ndef get_ftp_csv(\n    server_url: str,\n    user: str,\n    password: str,\n    folder: str,\n    filename: str,\n    **kwargs):\n    session = FTP(server_url, user, password)\n    session.cwd(folder)\n    download_file = io.BytesIO()\n    session.retrbinary(\"RETR {}\".format(filename), download_file.write)\n    download_file.seek(0)\n    return pd.read_csv(download_file, **kwargs)    ",
        "name" : "get_ftp_csv"
      },
      "uischema" : {
        "new table name" : {
          "ui:placeholder" : "Leave blank to modify selected table"
        }
      }
    },
    "notfound" : {
      "form" : {
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Tell us which functionality you are missing."
          }
        },
        "title" : "Can't find what you want?",
        "type" : "object"
      },
      "uischema" : {
        "description" : {
          "ui:widget" : "textarea"
        }
      }
    }
  }
}